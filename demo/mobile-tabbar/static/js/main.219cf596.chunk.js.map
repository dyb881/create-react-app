{"version":3,"sources":["common/compatible/index.ts","pages sync /^/.//.*$","common/antd-mobile/form/form.tsx","common/antd-mobile/form/form_item.tsx","common/antd-mobile/checkbox.tsx","common/antd-mobile/radio.tsx","common/antd-mobile/index.ts","configs/public.ts","configs/request.ts","common/request.ts","stores/view.ts","stores/user.ts","common/stores.tsx","stores/index.ts","common/index.ts","common/compatible/run.ts","App.tsx","serviceWorker.ts","index.tsx","common/tool.ts","common/compatible/info.ts","common/compatible/tool.ts","common/routers.tsx","configs/routers.ts","components/tabbar.tsx","pages/home/index.tsx","pages/user/index.jsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Form","onFinishFailed","props","onFailed","useCallback","errorInfo","fail","errorFields","errors","FormItem","hidden","validator","select","required","placeholder","label","name","children","rules","fieldProps","text","push","message","_rule","value","a","async","space","test","msg","Promise","reject","isElement","React","cloneElement","CheckboxItem","RadioItem","window","location","search","isProduction","protocol","params","qs","parse","slice","host","requestConfig","apiPath","interceptorsResponse","res","_config","ok","errorText","statusCodeKeys","successCodes","messageKeys","interceptorsRequest","config","FetchReques","log","request","responseType","reduce","key","undefined","includes","error","response","baseURL","get","post","put","patch","del","upload","View","observable","document","title","action","tabBarKey","tabBarHidden","User","bind","isLogin","when","configure","enforceActions","computedRequiresReaction","stores","view","user","this","onLogin","combine","Component","Observer","observer","autoRem","isIOS","addEventListener","setTimeout","scrollTo","body","scrollTop","isAndroid","activeElementScrollIntoView","process","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","toOptions","options","isArray","Array","k","option","isValidElement","UAParser","getResult","os","ua","browser","engine","device","isInView","el","getBoundingClientRect","top","bottom","innerHeight","activeElement","delay","editable","getAttribute","isEditable","tagName","scrollIntoView","block","min","max","isResize","htmlstyle","getElementsByTagName","style","resize","w","innerWidth","fontSize","removeEventListener","Date","routers","type","listen","routersProps","routersConfig","forEach","to","path","component","require","default","pathname","router","matchPath","exact","createMatch","history","createHashHistory","createBrowserHistory","Router","Pages","createRouters","routersOptions","setTitle","tabBars","transition","tabStyle","activeStyle","Tab","icon","active","className","tabs","Child","setTabBarKey","useEffect","onChange","activeKey","hide","createTabBarPage","color","box","onFinish","console","backgroundColor"],"mappings":"kIAAA,a,oBCAA,IAAIA,EAAM,CACT,SAAU,GACV,UAAW,GACX,eAAgB,GAChB,mBAAoB,GACpB,2BAA4B,GAC5B,SAAU,GACV,UAAW,GACX,eAAgB,GAChB,mBAAoB,IAIrB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,K,2FCrBPY,EAA4B,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,eAAmBC,EAAY,kCACnEC,EAAWC,uBACf,SAACC,GACC,IAAMC,KAAKD,EAAUE,YAAY,GAAGC,OAAO,GAAI,GAC/CP,GAAkBA,EAAeI,KAEnC,EAAEJ,IAGJ,OAAO,kBAAC,IAAD,eAASA,eAAgBE,GAAcD,K,0CCGnCO,EAAqC,SAAC,GAY5C,IAXLC,EAWI,EAXJA,OACAC,EAUI,EAVJA,UACAC,EASI,EATJA,OACAC,EAQI,EARJA,SACAC,EAOI,EAPJA,YACAC,EAMI,EANJA,MACAC,EAKI,EALJA,KACAC,EAII,EAJJA,SAII,IAHJC,aAGI,MAHI,GAGJ,EAFJC,EAEI,EAFJA,WACGjB,EACC,uHAEJ,GAAIQ,EAAQ,OAAO,KAEnB,GAAIM,EAAM,CACHC,IAAUA,EAAW,2BAAYF,IAGtC,IAAIK,EAAOR,EAAS,qBAAQ,qBAEP,kBAAVG,IAAoBK,GAAQL,GAGnCF,GACFK,EAAMG,KAAK,CACTR,UAAU,EACVS,SAAsB,IAAbT,EAAoBA,EAAkC,kBAAhBC,EAA2BA,EAAcM,IAKxFN,IACFZ,EAAMY,aAA8B,IAAhBA,EAAuBA,EAAkC,kBAAbD,EAAwBA,EAAWO,GAIrGF,EAAMG,KAAK,CACTV,UAAW,SAAOY,EAAOC,GAAd,eAAAC,EAAAC,OAAA,mDAGLF,GAA0B,kBAAVA,IAAuBG,EAAMC,KAAKJ,KACpDK,EAAG,UAAuB,kBAAVd,EAAqBA,EAAQ,qBAA1C,yCAGAc,IAAOlB,EAPH,kCAAAc,EAAA,MAO0Bd,EAAUa,IAPpC,OAOcK,EAPd,sBASTA,GATS,uCAAAJ,EAAA,MASKK,QAAQC,OAAOF,IATpB,wCAcf,OACE,kBAAC,IAAD,eAAOb,KAAMA,EAAME,MAAOA,GAAWC,GAClCa,oBAAUf,GAAYgB,IAAMC,aAAajB,EAAUf,GAASe,EAAUf,KAQvEyB,EAAQ,0B,wCC7ENQ,a,8BCAAC,UCPR,qE,gFCE6BC,OAAOC,SAA5BC,E,EAAAA,OAKKC,EAA4B,W,EALzBC,SAWHC,EAASC,IAAGC,MAAML,EAAOM,MAAM,I,iBCJjCC,EAAO,uBAWbN,IACHM,EAAOJ,EAAOI,MAPC,uBAaV,IAAMC,EAAqC,CAChDD,OACAE,QAAS,OACTC,qBAAsB,SAACC,EAAKC,GAE1B,OADAD,EAAIE,IAAM,IAAM9C,KAAK4C,EAAIG,UAAW,GAC7BH,IAUEI,EAAiB,CAAC,OAAQ,UAM1BC,EAAe,CAAC,EAAG,IAAK,IAAK,OAAQ,IAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAKzEC,EAAc,CAAC,MAAO,UAAW,WClDtCC,G,MAAyDV,EAAzDU,qBAAqBR,EAAoCF,EAApCE,qBAAyBS,E,YAAWX,E,kDAKF,IAAIY,IAAJ,eAC1DD,EAD0D,CAE7DD,oBAAqB,SAAAC,GAGnB,OAFID,IAAqBC,EAASD,EAAoBC,IACtDE,IAAIC,QAAQH,GACLA,GAETT,qBAAsB,SAACC,EAAKQ,GAC1B,IAAKR,EAAIG,WAAqC,SAAxBK,EAAOI,aAAyB,CAEpD,IAAMpE,EAAO4D,EAAeS,QAAO,SAACrE,EAAMsE,GAAP,YAA6BC,IAAbf,EAAIc,GAAqBtE,EAAOwD,EAAIc,UAAOC,GAEzFV,EAAaW,SAASxE,KACzBwD,EAAIiB,MAAQzE,EAEZwD,EAAIG,UAAYG,EAAYO,QAAO,SAAClC,EAAKmC,GAAN,OAAcd,EAAIc,IAAQnC,IAAK,6BAMtE,OAHAqB,EAAIE,IAAMF,EAAIG,UACVJ,IAAsBC,EAAMD,EAAqBC,EAAKQ,IAC1DE,IAAIQ,SAASlB,EAAKQ,EAAQR,EAAIE,IACvBF,M,EArBImB,Q,EAASC,I,EAAKC,K,EAAMC,I,EAAKC,M,EAAOC,I,EAAKC,Q,oICH/BC,G,mTAIlBC,K,yEAAmBxC,OAAOyC,SAASC,S,sCACnCC,K,oFAAkB,SAACD,GAClB1C,OAAOyC,SAASC,MAAQ,EAAKA,MAAQA,M,uCAOtCF,K,yEAAuB,K,0CACvBG,K,oFAAsB,SAACC,GACtB,EAAKA,UAAYA,M,0CAMlBJ,K,yEAA0B,K,6CAC1BG,K,oFAAyB,SAACE,GACzB,EAAKA,aAAeA,M,GCvBHC,G,+IAIlBN,K,yEAA8B,K,qCAK9BG,K,oFAAiB,SAACI,GACG,mBAATA,EACT,EAAKC,QAAUD,EAEfE,aAAK,kBAAM,EAAKD,UAASD,O,uECT/BG,YAAU,CACRC,eAAgB,WAChBC,0BAA0B,IAWrB,IAAMC,EAAS,ICZpB,aAAe,yBAQfC,KAAO,IAAIf,EARG,KAadgB,KAAO,IAAIT,EAXTU,KAAKD,KAAKE,SAAQ,IDgBTC,EAAU,SAAmBC,GAExC,IAAMC,EAAWC,YAASF,GAG1B,OAD6B,SAAA9F,GAAK,OAAI,kBAAC+F,EAAD,iBAAc/F,EAAd,CAAqBwF,OAAQA,Q,6EEhCrE,uZ,6HCqBAS,YAAQ,IAAK,KAAK,GAKdC,KACF/D,OAAOgE,iBAAiB,YAAY,WAElCC,YAAW,kBAAMjE,OAAOkE,SAAS,EAAGzB,SAAS0B,KAAKC,iBAOlDC,KAEFrE,OAAOgE,iBAAiB,SAAUM,KAA6B,G,6CCtBlDC,G,cAPH,kBACV,kBAAC,IAAD,KACE,kBAAC,IAAD,SCCgBC,QACW,cAA7BxE,OAAOC,SAASwE,UAEe,UAA7BzE,OAAOC,SAASwE,UAEhBzE,OAAOC,SAASwE,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASnC,SAASoC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,gCE7InB,wFAuBaC,EAAY,SAACC,GACxB,IAAMC,EAAUC,MAAMD,QAAQD,GAC9B,OAAO9H,OAAOD,KAAK+H,GAASzI,KAAI,SAAA4I,GAC9B,IAAMC,EAAUJ,EAAgBG,GAChC,MAAsB,kBAAXC,EAA4BA,EAChC,CAAE/G,MAAO+G,EAAQtG,MAAOmG,GAAWE,EAAIA,OAOrC7F,EAAY,SAACxC,GACxB,OAAOyC,IAAM8F,eAAevI,K,gCCpC9B,iF,GAKmD,IAAIwI,YAAWC,YAA9BC,G,EAArBC,G,EAAIC,Q,EAASC,O,EAAQH,IAEvB9B,G,EAF2BkC,OAEP,QAAZJ,EAAGlH,MAEX0F,EAAwB,YAAZwB,EAAGlH,M,iJCNfuH,EAAW,SAACC,GAAiB,IAAD,EACfA,EAAGC,wBAAnBC,EAD+B,EAC/BA,IAAKC,EAD0B,EAC1BA,OACb,OAAOD,GAAO,GAAKC,GAAUtG,OAAOuG,aAyBzBjC,EAA8B,kBAAM7B,SAAS+D,eAd5B,SAACL,GAA8B,IAAjBM,EAAgB,uDAAR,IAE5CC,EAAWP,EAAGQ,aAAa,mBAC3BC,EAA4B,UAAfT,EAAGU,SAAsC,aAAfV,EAAGU,SAAuC,KAAbH,GAAmBA,EAEzFE,IAAeV,EAASC,IAE1BlC,YAAW,kBAAMkC,EAAGW,eAAe,CAAEC,MAAO,aAAaN,GAOcK,CAAerE,SAAS+D,gBAMtF1C,EAAU,SAACkD,EAAaC,EAAaC,GAChD,IAAMC,EAAYnH,OAAOyC,SAAS2E,qBAAqB,QAAQ,GAAGC,MAC5DC,EAAS,WACb,IAAMC,EAAIvH,OAAOwH,WACjBL,EAAUM,UAAcF,EAAIN,GAAOA,GAASM,EAAIP,GAAOA,GAAQO,GAAKN,EAAO,IAAM,MAGnF,OADAK,IACIJ,GACFlH,OAAOgE,iBAAiB,SAAUsD,GAC3B,kBAAMtH,OAAO0H,oBAAoB,SAAUJ,KAE7C,cAMT,YAA2BK,O,mLCLL,SAACC,EAAD,GAA4E,IAAtDC,EAAqD,EAArDA,KAAMC,EAA+C,EAA/CA,OAAWC,EAAoC,iCAEzFC,EAA6D,GAGnEJ,EAAQK,SAAQ,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACvBD,EAAMH,EAAcE,GAAMG,OAAQ,KAAWF,GAAMG,QAC9CF,IAAWJ,EAAcE,GAAME,MAI1C,IAAM1D,EAxBY,SAACkD,GAAD,OAAuB,SAACW,EAAkBT,GAAuC,IAAD,uBAClG,YAAqBF,EAArB,+CAA8B,CAAC,IAApBY,EAAmB,QAC5B,GAAIC,YAAUF,EAAU,CAAEJ,KAAMK,EAAON,GAAIQ,OAAO,KAAWZ,EAAQ,CAEnEA,EAAOU,GACP,QAL8F,oFAwBpFG,CAAYf,GAEpBgB,EAAmB,SAATf,EAAkBgB,cAAsBC,cAGxDpE,EAAMkE,EAAQ3I,SAASsI,SAAUT,GAGjCc,EAAQd,QAAO,YAAmB,IAAhBS,EAAe,EAAfA,SAChB7D,EAAM6D,EAAUT,MAclB,MAAO,CAAEiB,OARsD,SAAAlL,GAAK,MACzD,SAATgK,EAAkB,kBAAC,IAAehK,GAAY,kBAAC,IAAkBA,IAOlDmL,MAFO,kBAAM,kBAAC,IAAD,eAASpB,QAASI,GAAmBD,MAQpCkB,CAAcrB,IAASsB,MAAzCH,E,EAAAA,OAAQC,E,EAAAA,O,oFCxFvB,oEAMA,IAMMG,EAAW,SAACzG,GAChBW,SAAOC,KAAK6F,SAASzG,GAPF,wBAgCRkF,EAAoB,CAC/B,CAAEM,GAAI,IAAKE,UCRmB,SAACgB,EAAD,GAAuF,IAAjEC,EAAgE,EAAhEA,WAAYC,EAAoD,EAApDA,SAAUC,EAA0C,EAA1CA,YAAazB,EAA6B,EAA7BA,OASjF0B,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAQ9K,EAAjB,EAAiBA,SAAjB,OAChC,yBAAK+K,UAAU,qBAAqBtC,MAAOqC,EAAM,eAAQJ,EAAR,GAAqBC,GAAgBD,GACpF,8BAAO1K,GACN6K,IAOCG,EAAe,GAkCrB,OA/BAR,EAAQnB,SAAQ,YAAsC,IAChD4B,EADaJ,EAAkC,EAAlCA,KAAM1K,EAA4B,EAA5BA,KAAMoJ,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UAEnC,GAAID,EAAM0B,EAAQxB,OAAQ,KAAWF,GAAMG,YACtC,KAAIF,EACJ,OADeyB,EAAQzB,EAO5BwB,EAAK5K,KAAK,CAAE6K,QAAOjF,OALJ,SAAC8E,GAAD,OACb,kBAACF,EAAD,CAAKE,OAAQA,EAAQD,KAAMA,GACxB1K,SASY2E,mBAAQ,YAAiB,IAAD,IAAbL,OAC6BC,KAAjDV,EADiC,EACjCA,UAAWkH,EADsB,EACtBA,aAAcjH,EADQ,EACRA,aAEjCkH,qBAAU,WACRjC,GAAUA,EAAOsB,EAAQxG,MACxB,CAACA,IAGJ,IAAMoH,EAAWjM,uBAAY,SAAAkM,GAC3BH,EAAaG,KACZ,IAEH,OAAO,kBAAC,IAAD,CAAQL,KAAMA,EAAMK,UAAWrH,EAAWoH,SAAUA,EAAUX,WAAYA,EAAYa,KAAMrH,OD1C/EsH,CApBE,CACxB,CAAEpL,KAAM,eAAMoJ,KAAM,QACpB,CAAEpJ,KAAM,eAAMoJ,KAAM,OAAQzF,MAAO,6BAMC,CACpC2G,YAAY,EACZC,SAAU,CAAE7B,SAAU,UACtB8B,YAAa,CAAEa,MAAO,WACtBtC,OAAQ,gBAAGpF,EAAH,EAAGA,MAAH,OAAeyG,EAASzG,OAShC,CAAEwF,GAAI,QAASC,KAAM,SAMVe,EAAkC,CAC7CG,YAAY,EACZxB,KAAM,OACNC,OAAQ,gBAAGpF,EAAH,EAAGA,MAAH,OAAeyG,EAASzG,M,2GE3CnB,qBACb,OACE,yBAAKiH,UAAS,eAAUtC,IAAMgD,MAA9B,QACO,kBAAC,IAAD,CAAMnC,GAAG,SAAT,WACL,kBAAC,OAAD,CAAMoC,SAAUC,QAAQhJ,KACtB,kBAAC,WAAD,CAAU5C,KAAK,OAAOD,MAAM,UAC5B,kBAAC,WAAD,CAAUC,KAAK,MAAMD,MAAM,QACxB,SAAAb,GAAK,OAAI,sBAAeA,EAAf,UAEZ,2C,gCCfR,mCAGe,qBACb,OACE,yBAAK8L,UAAU,OAAOtC,MAAO,CAAEmD,gBAAiB,SAAhD,gBACK,kBAAC,IAAD,CAAMtC,GAAG,KAAT,c","file":"static/js/main.219cf596.chunk.js","sourcesContent":["export * from './tool'; // 兼容相关信息\nexport * from './info'; // 兼容相关处理工具\n","var map = {\n\t\"./home\": 69,\n\t\"./home/\": 69,\n\t\"./home/index\": 69,\n\t\"./home/index.tsx\": 69,\n\t\"./home/style.module.less\": 94,\n\t\"./user\": 70,\n\t\"./user/\": 70,\n\t\"./user/index\": 70,\n\t\"./user/index.jsx\": 70\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 134;","import React, { useCallback } from 'react';\nimport { Toast } from 'antd-mobile';\nimport RefForm, { useForm as useFormSource } from 'rc-field-form';\nimport { FormProps } from 'rc-field-form/es/Form';\nimport { ValidateErrorEntity } from 'rc-field-form/es/interface';\n\n/**\n * 表单组件\n */\nexport const Form: React.FC<FormProps> = ({ onFinishFailed, ...props }) => {\n  const onFailed = useCallback(\n    (errorInfo: ValidateErrorEntity) => {\n      Toast.fail(errorInfo.errorFields[0].errors[0], 1);\n      onFinishFailed && onFinishFailed(errorInfo);\n    },\n    [!onFinishFailed]\n  );\n\n  return <RefForm onFinishFailed={onFailed} {...props} />;\n};\n\n/**\n * 表单 hooks\n */\nexport const useForm = () => {\n  const [form] = useFormSource();\n  const { submit } = form;\n\n  /**\n   * 重置清空表单\n   */\n  const reset = useCallback(() => {\n    form.resetFields();\n  }, []);\n\n  /**\n   * 重置清空表单，并提交表单\n   */\n  const resetSubmit = useCallback(() => {\n    reset();\n    submit();\n  }, []);\n\n  return { form, submit, reset, resetSubmit };\n};\n","import React from 'react';\nimport { InputItem } from 'antd-mobile';\nimport { isElement } from 'common';\nimport { Field } from 'rc-field-form';\nimport { FieldProps } from 'rc-field-form/es/Field';\n\nexport type TFormItemProps = Pick<FieldProps, 'name' | 'rules'> & {\n  hidden?: boolean; // 隐藏表单项\n  validator?: (value: any) => string | undefined | Promise<string | undefined>; // 额外验证器\n  select?: boolean; // 是否选择器\n  required?: boolean | string; // 是否必填\n  placeholder?: boolean | string | string[]; // 占位符\n  children?: JSX.Element | ((props: any) => JSX.Element);\n  label?: React.ReactNode; // 标签名\n  fieldProps?: FieldProps;\n  [key: string]: any;\n};\n\n/**\n * 表单项组件，设置表单字段\n */\nexport const FormItem: React.FC<TFormItemProps> = ({\n  hidden,\n  validator,\n  select,\n  required,\n  placeholder,\n  label,\n  name,\n  children,\n  rules = [],\n  fieldProps,\n  ...props\n}) => {\n  // 隐藏表单项\n  if (hidden) return null;\n\n  if (name) {\n    if (!children) children = <InputItem>{label}</InputItem>;\n\n    // 默认提示语\n    let text = select ? '请选择' : '请输入';\n    // 接入label，如 label:用户名 = 请输入用户名\n    if (typeof label === 'string') text += label;\n\n    // 加入必填提示\n    if (required) {\n      rules.push({\n        required: true,\n        message: required !== true ? required : typeof placeholder === 'string' ? placeholder : text,\n      });\n    }\n\n    // 写入默认占位符\n    if (placeholder) {\n      props.placeholder = placeholder !== true ? placeholder : typeof required === 'string' ? required : text;\n    }\n\n    // 追加验证器\n    rules.push({\n      validator: async (_rule, value) => {\n        let msg;\n        // 不可提交空格\n        if (value && typeof value === 'string' && !space.test(value)) {\n          msg = `${typeof label === 'string' ? label : '输入框'}不可提交空格`;\n        }\n        // 自定义验证器\n        if (!msg && validator) msg = await validator(value);\n\n        msg && (await Promise.reject(msg));\n      },\n    });\n  }\n\n  return (\n    <Field name={name} rules={rules} {...fieldProps}>\n      {isElement(children) ? React.cloneElement(children, props) : children!(props)}\n    </Field>\n  );\n};\n\n/**\n * 非全空格，即字符串内包含非空格的时候不匹配，一般用于 !space.test('  ') === true 判断字符串是否都是空格\n */\nconst space = /^[\\s\\S]*.*[^\\s][\\s\\S]*$/;\n","import React, { useMemo } from 'react';\nimport { List, Checkbox as CheckboxSource } from 'antd-mobile';\nimport { ListProps } from 'antd-mobile/es/list';\nimport { CheckboxItemProps } from 'antd-mobile/es/checkbox/CheckboxItem';\nimport { toOptions, TOptionsProps } from '../tool';\nimport { TInputNotRequired } from '../types';\n\nconst { CheckboxItem } = CheckboxSource;\n\nexport type TCheckboxOption = CheckboxItemProps & {\n  value: number | string;\n  label: React.ReactNode;\n};\n\nexport type TCheckboxProps = TInputNotRequired<TCheckboxOption['value'][]> & TOptionsProps<TCheckboxOption> & ListProps;\n\n/**\n * 多选框\n */\nexport const Checkbox: React.FC<TCheckboxProps> = ({ options = [], value = [], onChange, ...props }) => {\n  const createOnChange = (val: TCheckboxOption['value']) => () => {\n    const index = value.indexOf(val);\n    index > -1 ? value.splice(index, 1) : value.push(val);\n    onChange && onChange(value);\n  };\n\n  const checkboxItems = useMemo(() => {\n    return toOptions(options).map(({ label, value, ...i }) => (\n      <CheckboxItem key={value} onChange={createOnChange(value)} {...i}>\n        {label}\n      </CheckboxItem>\n    ));\n  }, [JSON.stringify(options)]);\n\n  return <List {...props}>{checkboxItems}</List>;\n};\n","import React, { useMemo } from 'react';\nimport { List, Radio as RadioSource } from 'antd-mobile';\nimport { ListProps } from 'antd-mobile/es/list';\nimport { RadioItemProps } from 'antd-mobile/es/radio/RadioItem';\nimport { toOptions, TOptionsProps } from '../tool';\nimport { TInputNotRequired } from '../types';\n\nconst { RadioItem } = RadioSource;\n\nexport type TRadioOption = RadioItemProps & {\n  value: number | string;\n  label: React.ReactNode;\n};\n\nexport type TRadioProps = TInputNotRequired<TRadioOption['value']> & TOptionsProps<TRadioOption> & ListProps;\n\n/**\n * 单选框\n */\nexport const Radio: React.FC<TRadioProps> = ({ options = [], value, onChange, ...props }) => {\n  const radioOptions = useMemo(() => toOptions(options), [JSON.stringify(options)]);\n\n  return (\n    <List {...props}>\n      {radioOptions.map(({ label, value: val, ...i }) => (\n        <RadioItem key={val} checked={value === val} onChange={onChange} {...i}>\n          {label}\n        </RadioItem>\n      ))}\n    </List>\n  );\n};\n","/**\n * 集合导出\n * 由于基本都会使用到，所以一次性导出，如果后期有需求可以自行注释不使用的文件达到优化的效果\n * 以下是基于 antd-mobile 二次封装的组件，使用方法基本与官方文档一致，只是追加了一些默认值以及方法\n */\nexport * from './form';\nexport * from './checkbox';\nexport * from './picker';\nexport * from './radio';\n","import qs from 'qs';\n\nconst { search, protocol } = window.location;\n\n/**\n * 是否生产环境\n */\nexport const isProduction = protocol === 'https:';\n\n/**\n * 链接参数\n * http://localhost?val=1 => params = {val: 1}\n */\nexport const params = qs.parse(search.slice(1));\n","import { TFetchRequestConfig } from '@dyb881/fetch-request';\nimport { isProduction, params } from './public';\nimport { Toast } from 'antd-mobile';\n\n// ------------------------------- 请求器配置 --------------------------------- //\n\n/**\n * 生产地址\n */\nexport let host = 'https://www.test.com';\n\n/**\n * 测试地址\n */\nconst hostTest = 'http://www.test.com';\n\n/**\n * 会根据 isProduction 自行变动，需要配置对应的生产和测试地址\n * 测试环境下链接参数 params.host 可强制变更 host\n */\nif (!isProduction) {\n  host = params.host || hostTest;\n}\n\n/**\n * 请求参数配置\n */\nexport const requestConfig: TFetchRequestConfig = {\n  host, // API 地址\n  apiPath: '/api', // API 目录\n  interceptorsResponse: (res, _config) => {\n    res.ok || Toast.fail(res.errorText, 1);\n    return res;\n  },\n};\n\n// ------------------------------- 响应处理配置 --------------------------------- //\n\n/**\n * 状态码 key\n * 返回结果中，用于匹配状态码的 key\n */\nexport const statusCodeKeys = ['code', 'status'];\n\n/**\n * 成功状态码\n * 决定请求器响应结果 res.ok:boolean 返回的值\n */\nexport const successCodes = [0, '0', 200, '0000', 1000, 1001, 1002, 1003, 1004, 1005, 2000];\n\n/**\n * 错误信息字段\n */\nexport const messageKeys = ['msg', 'message', 'Message'];\n","import FetchReques, { log } from '@dyb881/fetch-request';\nimport { requestConfig, statusCodeKeys, successCodes, messageKeys } from 'configs';\n\nconst { interceptorsRequest, interceptorsResponse, ...config } = requestConfig;\n\n/**\n * 请求模块初始化并输出请求方法以及参数\n */\nexport const { baseURL, get, post, put, patch, del, upload } = new FetchReques({\n  ...config,\n  interceptorsRequest: config => {\n    if (interceptorsRequest) config = interceptorsRequest(config);\n    log.request(config);\n    return config;\n  },\n  interceptorsResponse: (res, config) => {\n    if (!res.errorText && config.responseType === 'json') {\n      // 获取匹配的 code\n      const code = statusCodeKeys.reduce((code, key) => (res[key] === undefined ? code : res[key]), undefined);\n      // 当 code 匹配成功状态码失败，既是请求失败\n      if (!successCodes.includes(code!)) {\n        res.error = code;\n        // 获取错误提示信息\n        res.errorText = messageKeys.reduce((msg, key) => res[key] || msg, '请求异常');\n      }\n    }\n    res.ok = !res.errorText; // 请求结果状态 成功/失败\n    if (interceptorsResponse) res = interceptorsResponse(res, config);\n    log.response(res, config, res.ok);\n    return res;\n  },\n});\n","import { observable, action } from 'mobx';\n\n/**\n * 视图\n */\nexport default class View {\n  /**\n   * 页面标题\n   */\n  @observable title = window.document.title;\n  @action setTitle = (title: string) => {\n    window.document.title = this.title = title;\n  };\n\n  /**\n   * tabBar 页面的 key\n   * 必要时可动态控制跳转到对应 tab\n   */\n  @observable tabBarKey = 0;\n  @action setTabBarKey = (tabBarKey: number) => {\n    this.tabBarKey = tabBarKey;\n  };\n\n  /**\n   * 动态控制 tabBar 是否隐藏\n   */\n  @observable tabBarHidden = false;\n  @action setTabBarHidden = (tabBarHidden: boolean) => {\n    this.tabBarHidden = tabBarHidden;\n  };\n}\n","import { observable, action, when } from 'mobx';\n\n/**\n * 用户\n */\nexport default class User {\n  /**\n   * 是否登录\n   */\n  @observable isLogin: boolean = false;\n\n  /**\n   * 登陆状态监听\n   */\n  @action onLogin = (bind: boolean | (() => void)) => {\n    if (typeof bind === 'boolean') {\n      this.isLogin = bind;\n    } else {\n      when(() => this.isLogin, bind);\n    }\n  };\n}\n","import React from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { configure } from 'mobx';\nimport { observer } from 'mobx-react';\nimport Stores from 'stores';\n\n/**\n * 全局设置\n */\nconfigure({\n  enforceActions: 'observed', // 只有被定义为动作的方法才能修改监听值\n  computedRequiresReaction: true, // 计算值内必须使用监听值\n});\n\n/**\n * 全局状态类型\n */\ntype TStores = { stores: Stores };\n\n/**\n * 全局状态\n */\nexport const stores = new Stores();\n\n/**\n * 状态联合到组件（函数组件）\n * 使用后状态变更时会刷新两次组件，build 后就不会有这情况了，可放心开发\n */\nexport const combine = <P extends object>(Component: React.FC<P & TStores>) => {\n  // 生成观察者组件\n  const Observer = observer(Component);\n  // 注入全局状态\n  const Combine: React.FC<P> = props => <Observer {...props} stores={stores} />;\n  return Combine;\n};\n\n/**\n * 状态 Props\n */\nexport type TStoresProps = Partial<TStores>;\n\n/**\n * 状态联合到组件（类装饰器）\n * 使用后状态变更时会刷新两次组件，build 后就不会有这情况了，可放心开发\n */\nexport const Combine = <P extends object>(Component: React.ComponentClass<P & TStoresProps>) => {\n  // 生成观察者组件\n  const Observer = observer(Component);\n  // 注入全局状态\n  class Combine extends React.Component<P> {\n    render = () => <Observer {...this.props} stores={stores} />;\n  }\n  return Combine;\n};\n\n/**\n * 在原有基础上加入路由类型定义\n */\nexport const combinePage = <P extends object>(Component: React.FC<P & TStores & RouteComponentProps>) => {\n  return combine(Component);\n};\n","import View from './view';\nimport User from './user';\n\n/**\n * 全局状态管理\n */\nexport default class Stores {\n  /**\n   * 状态初始化\n   */\n  constructor() {\n    // 默认为登录状态\n    this.user.onLogin(true);\n  }\n\n  /**\n   * 视图\n   */\n  view = new View();\n\n  /**\n   * 用户\n   */\n  user = new User();\n}\n","/**\n * 导出必须文件\n * 注意循环引用导致的代码运行报错\n */\nexport * from './request'; // 请求器\nexport * from './stores'; // 状态管理\nexport * from './routers'; // 导出路由\nexport * from './tool'; // 导出工具函数\nexport * from './types'; // 导出常用类型\n\nexport * from './antd-mobile'; // 导出二次封装组件\nexport * from './compatible'; // 导出兼容相关工具或值\n","/**\n * 在入口文件顶部引用运行兼容代码\n */\n\n/**\n * 兼容包\n * 根据需要兼容的机型，按需载入兼容包\n */\nimport 'whatwg-fetch';\nimport 'core-js/features/object/entries';\nimport 'core-js/features/object/values';\n// import 'core-js/features/object/assign';\n// import 'core-js/features/string/includes';\n// import 'core-js/features/array/includes';\n// import 'core-js/features/array/from';\n// import 'core-js/features/promise';\n// import 'core-js/features/symbol';\n// import 'core-js/features/set';\nimport { isIOS, isAndroid } from './info';\nimport { autoRem, activeElementScrollIntoView } from './tool';\n\nautoRem(320, 750, true);\n\n/**\n * 处理 iOS 兼容\n */\nif (isIOS) {\n  window.addEventListener('focusout', () => {\n    // 修复微信浏览器版本6.7.4 IOS12会出现键盘收起后，视图被顶上去了没有下来\n    setTimeout(() => window.scrollTo(0, document.body.scrollTop));\n  });\n}\n\n/**\n * 处理 Android 兼容\n */\nif (isAndroid) {\n  // android 键盘弹出、收起，可视区高度会发生变化\n  window.addEventListener('resize', activeElementScrollIntoView, false);\n}\n","import React from 'react';\nimport { hot } from 'react-hot-loader/root';\nimport { Router, Pages } from 'common/routers'; // 直接引用 common 会导致循环引用，build 后运行报错\nimport 'common/style'; // 默认全局样式\n\n/**\n * Router 用于注册基础路由\n * Pages 路由页面集合\n */\nconst App = () => (\n  <Router>\n    <Pages />\n  </Router>\n);\n\n// 热更新\nexport default process.env.NODE_ENV === 'development' ? hot(App) : App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'common/compatible/run';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\n\n/**\n * 选项值\n */\nexport type TOption<T = any> = { value: T; label: React.ReactNode };\n\n/**\n * 可被转为选项值\n */\nexport type TOptions<T = TOption> = T[] | (string | number)[] | object;\n\n/**\n * 选项值 Props\n */\nexport type TOptionsProps<T = TOption> = {\n  options?: TOptions<T>;\n};\n\n/**\n * 转为选项值\n * ['v1','v2'] => [{value: 1, label: 'v1'}, {value: 2, label: 'v2'}]\n */\nexport const toOptions = (options: TOptions) => {\n  const isArray = Array.isArray(options);\n  return Object.keys(options).map(k => {\n    const option = (options as any)[k];\n    if (typeof option === 'object') return option;\n    return { label: option, value: isArray ? +k : k };\n  });\n};\n\n/**\n * 判断是否有效 react 组件\n */\nexport const isElement = (e: any): e is JSX.Element => {\n  return React.isValidElement(e);\n};\n","import { UAParser } from 'ua-parser-js';\n\n/**\n * 浏览器解析器\n */\nexport const { ua, browser, engine, os, device } = new UAParser().getResult();\n\nexport const isIOS = os.name === 'iOS';\n\nexport const isAndroid = os.name === 'Android';\n","/**\n * 是否在可视区\n */\nexport const isInView = (el: Element) => {\n  const { top, bottom } = el.getBoundingClientRect();\n  return top >= 0 && bottom <= window.innerHeight;\n};\n\n/**\n * 判断焦点元素是否在可视区\n */\nexport const activeElementIsInView = () => !!document.activeElement && isInView(document.activeElement);\n\n/**\n * 滚动到可视区域\n */\nexport const scrollIntoView = (el: Element, delay = 100) => {\n  // contentEditable 属性设置或返回元素内容是否可编辑。\n  const editable = el.getAttribute('contenteditable');\n  const isEditable = el.tagName === 'INPUT' || el.tagName === 'TEXTAREA' || editable === '' || editable;\n  // 可编辑，并不在视图内\n  if (isEditable && !isInView(el)) {\n    // 让当前的元素滚动到浏览器窗口的可视区域内。\n    setTimeout(() => el.scrollIntoView({ block: 'center' }), delay);\n  }\n};\n\n/**\n * 焦点元素滚动到可视区域\n */\nexport const activeElementScrollIntoView = () => document.activeElement && scrollIntoView(document.activeElement);\n\n/**\n * 自动 rem\n * 以 100px 为基准，相对 750 进行计算\n */\nexport const autoRem = (min: number, max: number, isResize?: boolean) => {\n  const htmlstyle = window.document.getElementsByTagName('html')[0].style;\n  const resize = () => {\n    const w = window.innerWidth;\n    htmlstyle.fontSize = (((w > max && max) || (w < min && min) || w) / max) * 100 + 'px';\n  };\n  resize();\n  if (isResize) {\n    window.addEventListener('resize', resize);\n    return () => window.removeEventListener('resize', resize);\n  }\n  return () => {};\n};\n\n/**\n * 处理移动端 Date 时间格式报 Invalid Date\n */\nexport class Dates extends Date {\n  constructor(arg: string | number | Date) {\n    super(typeof arg === 'string' ? arg.replace(/-/g, '/') : arg);\n  }\n}\n","import React from 'react';\nimport { matchPath, HashRouter, HashRouterProps, BrowserRouter, BrowserRouterProps } from 'react-router-dom';\nimport { createHashHistory, createBrowserHistory } from 'history';\nimport { routers, routersOptions } from 'configs/routers';\nimport Routers from '@dyb881/router';\nimport '@dyb881/router/lib/style.css';\n\n/**\n * 单个路由属性\n */\nexport type TRouter = {\n  to: string; // 路由地址\n  path?: string; // 绑定组件路径，默认为 /src/pages 下的文件或文件夹\n  component?: React.ComponentType<any>; // 绑定组件，优先度低于 path\n  [key: string]: any;\n};\n\n/**\n * 路由配置数组\n */\nexport type TRouters = TRouter[];\n\n/**\n * 路由选项\n */\nexport type TRoutersOptions = {\n  app?: boolean; // 是否打包成APP，既启用app模拟跳转\n  transition?: boolean; // 开启跳转动画\n  type: 'hash' | 'browser'; // 路由类型\n  listen?: (router: TRouter) => void; // 路由监听\n};\n\n/**\n * 匹配路由响应监听\n */\nconst createMatch = (routers: TRouters) => (pathname: string, listen: TRoutersOptions['listen']) => {\n  for (const router of routers) {\n    if (matchPath(pathname, { path: router.to, exact: true }) && listen) {\n      // 匹配并响应对应路由配置\n      listen(router);\n      break;\n    }\n  }\n};\n\n/**\n * 路由配置生成组件配置\n */\nconst createRouters = (routers: TRouters, { type, listen, ...routersProps }: TRoutersOptions) => {\n  // 路由组件配置\n  const routersConfig: { [key: string]: React.ComponentType<any> } = {};\n\n  // 引用页面并写入路由\n  routers.forEach(({ to, path, component }) => {\n    if (path) routersConfig[to] = require('pages/' + path).default;\n    else if (component) routersConfig[to] = component;\n  });\n\n  // 创建比较方法\n  const match = createMatch(routers);\n  // 创建路由\n  const history = type === 'hash' ? createHashHistory() : createBrowserHistory();\n\n  // 初次匹配\n  match(history.location.pathname, listen);\n\n  // 监听地址变动\n  history.listen(({ pathname }) => {\n    match(pathname, listen);\n  });\n\n  /**\n   * 路由注入\n   */\n  const Router: React.FC<HashRouterProps & BrowserRouterProps> = props =>\n    type === 'hash' ? <HashRouter {...props} /> : <BrowserRouter {...props} />;\n\n  /**\n   * 路由页面集合\n   */\n  const Pages: React.FC = () => <Routers routers={routersConfig} {...routersProps} />;\n\n  return { Router, Pages };\n};\n\n/**\n * 路由配置生成\n */\nexport const { Router, Pages } = createRouters(routers, routersOptions);\n","import { TRouters, TRoutersOptions, stores } from 'common';\nimport { TTabBars, TTabbarOptions, createTabBarPage } from 'components';\n\n/**\n * 默认标题\n */\nconst defaultTitle = 'tabbar 模版';\n\n/**\n * 写入标题\n * 根据页面变动把对应页面的 title 写入标题\n */\nconst setTitle = (title?: string) => {\n  stores.view.setTitle(title || defaultTitle);\n};\n\n/**\n * tabbar 页面配置\n */\nconst tabBars: TTabBars = [\n  { text: '首页', path: 'home' },\n  { text: '我的', path: 'user', title: '用户中心' },\n];\n\n/**\n * tabbar 选项配置\n */\nconst tabbarOptions: TTabbarOptions = {\n  transition: true,\n  tabStyle: { fontSize: '.28rem' },\n  activeStyle: { color: '#1890ff' },\n  listen: ({ title }) => setTitle(title),\n};\n\n/**\n * 路由地址配置\n * 绑定组件路径 path，默认为 /src/pages 下的文件或文件夹\n */\nexport const routers: TRouters = [\n  { to: '/', component: createTabBarPage(tabBars, tabbarOptions) },\n  { to: '/user', path: 'user' },\n];\n\n/**\n * 路由选项配置\n */\nexport const routersOptions: TRoutersOptions = {\n  transition: true,\n  type: 'hash',\n  listen: ({ title }) => setTitle(title),\n};\n","import React, { useEffect, useCallback } from 'react';\nimport { combine } from 'common';\nimport TabBar, { TTab } from '@dyb881/tab-bar';\nimport '@dyb881/tab-bar/lib/style.css';\n\n/**\n * tab 配置\n */\ntype TTabBar = {\n  icon?: React.ReactNode;\n  text: React.ReactNode; // 显示标题\n  path?: string; // 绑定组件路径，默认为 /src/pages 下的文件或文件夹\n  component?: React.ComponentType<any>; // 绑定组件，优先度低于 path\n  [key: string]: any;\n};\n\n/**\n * tabbar 配置数组\n */\nexport type TTabBars = TTabBar[];\n\n/**\n * tabbar 选项\n */\nexport type TTabbarOptions = {\n  transition?: boolean; // 是否开启切换动画\n  tabStyle: React.CSSProperties; // 样式\n  activeStyle: React.CSSProperties; // 选中样式，会与 tabStyle 叠加\n  listen?: (tabbar: TTabBar) => void; // tabbar 监听\n};\n\nexport const createTabBarPage = (tabBars: TTabBars, { transition, tabStyle, activeStyle, listen }: TTabbarOptions) => {\n  type TTabProps = {\n    icon?: React.ReactNode;\n    active: boolean;\n  };\n\n  /**\n   * tab 组件\n   */\n  const Tab: React.SFC<TTabProps> = ({ icon, active, children }) => (\n    <div className=\"fill column-center\" style={active ? { ...tabStyle, ...activeStyle } : tabStyle}>\n      <span>{children}</span>\n      {icon}\n    </div>\n  );\n\n  /**\n   * 配置数组\n   */\n  const tabs: TTab[] = [];\n\n  // 引用页面并写入配置\n  tabBars.forEach(({ icon, text, path, component }) => {\n    let Child;\n    if (path) Child = require('pages/' + path).default;\n    else if (component) Child = component;\n    else return;\n    const render = (active: boolean) => (\n      <Tab active={active} icon={icon}>\n        {text}\n      </Tab>\n    );\n    tabs.push({ Child, render });\n  });\n\n  /**\n   * TabBar 页面组件\n   */\n  const TabBarPage = combine(({ stores }) => {\n    const { tabBarKey, setTabBarKey, tabBarHidden } = stores.view;\n    // key 变动时执行监听\n    useEffect(() => {\n      listen && listen(tabBars[tabBarKey]);\n    }, [tabBarKey]);\n\n    // tab 变动\n    const onChange = useCallback(activeKey => {\n      setTabBarKey(activeKey);\n    }, []);\n\n    return <TabBar tabs={tabs} activeKey={tabBarKey} onChange={onChange} transition={transition} hide={tabBarHidden} />;\n  });\n\n  return TabBarPage;\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { InputItem } from 'antd-mobile';\nimport { Form, FormItem } from 'common';\nimport style from './style.module.less';\n\nexport default () => {\n  return (\n    <div className={`page ${style.box}`}>\n      Home <Link to=\"/user\">go User</Link>\n      <Form onFinish={console.log}>\n        <FormItem name=\"test\" label=\"ceshi\" />\n        <FormItem name=\"tss\" label=\"sss\">\n          {props => <InputItem {...props}>sss</InputItem>}\n        </FormItem>\n        <button>sub</button>\n      </Form>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default () => {\n  return (\n    <div className=\"fill\" style={{ backgroundColor: '#f00' }}>\n      页面 <Link to=\"/\">go Home</Link>\n    </div>\n  );\n};\n"],"sourceRoot":""}